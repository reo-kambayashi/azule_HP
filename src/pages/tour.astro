---
import Layout from "../layouts/Layout.astro";
import TourCard from "../components/TourCard.astro";
import tours from "../data/tour.json";

// SEO情報 (ビルド時)
const title = "Live | Azule Orchid (アズールオーキッド) | Azule";
const metaDescription =
  "Azule Orchid（アズールオーキッド、azule orchid, あずーる）のライブ・イベント情報。Azuleの予定されているライブと過去のライブ履歴をご紹介します。";
// フロントマターでのビルド時分類は、クライアントサイドで処理するため、ここでは必須ではなくなります。
---

<Layout
  title={title}
  metaDescription={metaDescription}
  keywords="Azule, Azule Orchid, azule, azule orchid, あずーる, アズール, live, tour, event, ライブ情報, ツアー情報, イベント情報, 仙台, ポストポップ"
>
  <section class="tour-page">
    <h1 class="tour-page-title">Live</h1>

    <div class="tour-section">
      <h2 class="tour-section-title">Scheduled</h2>
      <div id="current-tours-list" class="tour-list fade-in-left">
        {/* Populated by client-side JavaScript */}
      </div>
      <p
        id="no-current-tours-message"
        class="tour-empty"
        style="display: none;"
      >
        現在予定されているライブはありません。
      </p>
    </div>

    <div class="past-tour-section">
      <h2 class="tour-section-title">Past</h2>
      <div id="past-tours-list" class="tour-list fade-in-left">
        {/* Populated by client-side JavaScript */}
      </div>
      <p id="no-past-tours-message" class="tour-empty" style="display: none;">
        過去のライブ情報はありません。
      </p>
    </div>

    {
      /* Hidden container for all tour cards, rendered by Astro, manipulated by JS */
    }
    <div id="all-tours-pool" style="display: none;">
      {
        tours.map((tour: any) => (
          <div class="tour-item-wrapper" data-event-date={tour.date}>
            <TourCard tour={tour} />
          </div>
        ))
      }
    </div>
  </section>
</Layout>

<style>
  .tour-page {
    padding: var(--spacing-lg) var(--spacing-md);
    min-height: calc(100vh - 200px);
  }

  .tour-page-title {
    font-family: "Inter", sans-serif;
    font-size: clamp(2rem, 5vw, 3rem);
    font-weight: 700;
    background: linear-gradient(
      135deg,
      var(--color-secondary),
      var(--color-accent)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: var(--spacing-xl);
    text-align: center;
    position: relative;
    letter-spacing: 1px;
  }

  .tour-page-title::after {
    content: "";
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(
      90deg,
      var(--color-secondary),
      var(--color-accent)
    );
    border-radius: 2px;
  }

  .tour-section-title {
    font-family: "Inter", sans-serif;
    font-size: clamp(1.5rem, 4vw, 2rem);
    font-weight: 600;
    color: var(--color-text);
    margin-top: var(--spacing-xl);
    margin-bottom: var(--spacing-lg);
    text-align: center;
    position: relative;
  }

  .tour-section-title::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 20%;
    transform: translateY(-50%);
    width: 20%;
    height: 1px;
    background: linear-gradient(90deg, transparent, var(--color-secondary));
  }

  .tour-section-title::after {
    content: "";
    position: absolute;
    top: 50%;
    right: 20%;
    transform: translateY(-50%);
    width: 20%;
    height: 1px;
    background: linear-gradient(90deg, var(--color-secondary), transparent);
  }

  .tour-section,
  .past-tour-section {
    margin-bottom: var(--spacing-2xl);
    max-width: var(--container-max-width);
    margin-left: auto;
    margin-right: auto;
  }

  .tour-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xl);
    width: 100%;
  }

  .past-tour-section {
    margin-top: var(--spacing-2xl);
    padding-top: var(--spacing-xl);
    border-top: 2px solid rgba(59, 130, 246, 0.1);
    position: relative;
  }

  .past-tour-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 2px;
    background: linear-gradient(
      90deg,
      var(--color-secondary),
      var(--color-accent)
    );
  }

  .tour-empty {
    text-align: center;
    padding: var(--spacing-xl);
    color: var(--color-text-light);
    font-style: italic;
    font-size: 1.1rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-glass);
    max-width: 600px;
    margin: var(--spacing-xl) auto;
    position: relative;
  }

  .tour-empty::before {
    content: "🎤";
    display: block;
    font-size: 2rem;
    margin-bottom: var(--spacing-md);
  }

  .tour-item-wrapper {
    display: block;
    width: 100%;
  }

  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .tour-page {
      padding: var(--spacing-md) var(--spacing-sm);
    }

    .tour-page-title {
      margin-bottom: var(--spacing-lg);
    }

    .tour-section-title {
      margin-bottom: var(--spacing-md);
    }

    .tour-section-title::before,
    .tour-section-title::after {
      width: 15%;
      left: 15%;
      right: 15%;
    }

    .tour-section,
    .past-tour-section {
      margin-bottom: var(--spacing-xl);
    }

    .past-tour-section {
      margin-top: var(--spacing-xl);
      padding-top: var(--spacing-md);
    }

    .tour-list {
      gap: var(--spacing-lg);
    }
  }

  @media (max-width: 480px) {
    .tour-page {
      padding: var(--spacing-sm);
    }

    .tour-page-title::after {
      width: 60px;
      height: 3px;
    }

    .tour-section-title::before,
    .tour-section-title::after {
      display: none;
    }

    .tour-empty {
      padding: var(--spacing-lg);
      font-size: 1rem;
    }
  }
</style>

<script>
  // tour.astroのスクリプト
  const today = new Date();
  today.setHours(0, 0, 0, 0); // 時刻をリセットして日付のみで比較

  // YYYY.MM.DD 形式の日付文字列をDateオブジェクトに変換する関数
  function parseClientDate(dateStr: string) {
    if (!dateStr) return null;
    const parts = dateStr.split(".").map(Number);
    if (parts.length === 3 && !parts.some(isNaN)) {
      // JavaScriptの月は0から始まるため、月-1で調整
      return new Date(parts[0], parts[1] - 1, parts[2]);
    }
    console.warn("Invalid date format encountered:", dateStr);
    return null;
  }

  const currentToursList = document.getElementById("current-tours-list");
  const pastToursList = document.getElementById("past-tours-list");
  const noCurrentToursMessage = document.getElementById(
    "no-current-tours-message"
  );
  const noPastToursMessage = document.getElementById("no-past-tours-message");
  const allToursPool = document.getElementById("all-tours-pool");

  if (
    currentToursList &&
    pastToursList &&
    noCurrentToursMessage &&
    noPastToursMessage &&
    allToursPool
  ) {
    const tourItemWrappers = Array.from(allToursPool.children);

    const clientCurrentToursElements: HTMLElement[] = [];
    const clientPastToursElements: HTMLElement[] = [];

    tourItemWrappers.forEach((wrapper) => {
      if (!(wrapper instanceof HTMLElement)) return;

      const eventDateStr = wrapper.dataset.eventDate;
      if (!eventDateStr) {
        // Check if eventDateStr is undefined or empty
        console.warn("Skipping tour item due to missing date:", wrapper);
        return;
      }
      const eventDate = parseClientDate(eventDateStr);

      if (!eventDate) {
        // 無効な日付を持つアイテムはスキップ
        console.warn("Skipping tour item due to invalid date:", wrapper);
        return;
      }

      if (eventDate >= today) {
        clientCurrentToursElements.push(wrapper);
      } else {
        clientPastToursElements.push(wrapper);
      }
    });

    // 日付でソート
    clientCurrentToursElements.sort((a, b) => {
      const dateAStr = a.dataset.eventDate;
      const dateBStr = b.dataset.eventDate;
      if (!dateAStr || !dateBStr) return 0; // Handle undefined or empty strings
      const dateA = parseClientDate(dateAStr);
      const dateB = parseClientDate(dateBStr);
      if (!dateA || !dateB) return 0;
      return dateA.getTime() - dateB.getTime(); // Scheduled: 昇順 (古い順)
    });
    clientPastToursElements.sort((a, b) => {
      const dateAStr = a.dataset.eventDate;
      const dateBStr = b.dataset.eventDate;
      if (!dateAStr || !dateBStr) return 0; // Handle undefined or empty strings
      const dateA = parseClientDate(dateAStr);
      const dateB = parseClientDate(dateBStr);
      if (!dateA || !dateB) return 0;
      return dateB.getTime() - dateA.getTime(); // Past: 降順 (新しい順)
    });

    // DOMに要素を追加
    clientCurrentToursElements.forEach((el) =>
      currentToursList.appendChild(el)
    );
    clientPastToursElements.forEach((el) => pastToursList.appendChild(el));

    // 「ライブなし」メッセージの表示/非表示を更新
    noCurrentToursMessage.style.display =
      clientCurrentToursElements.length === 0 ? "block" : "none";
    noPastToursMessage.style.display =
      clientPastToursElements.length === 0 ? "block" : "none";
  }
</script>
